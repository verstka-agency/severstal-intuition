import React, { useState } from 'react'
import { useMutation, useQuery } from "@tanstack/react-query"
import Button from '../../components/Button/Button'
import './Postcards.scss'
import { Swiper, SwiperSlide } from 'swiper/react'
import { Swiper as SwiperType } from 'swiper/types'
import 'swiper/swiper-bundle.css'
import { Navigation } from "swiper/modules"
import ErrorMessage from '../../components/ErrorMessage/ErrorMessage'
import Loader from '../../components/Loader/Loader'
import { apiProvider } from "src/api"
import { Navigate, useNavigate } from "react-router-dom"
import { useProfile } from "src/hooks"

const Postcards = () => {
    const [currentSlideIndex, setCurrentSlideIndex] = useState(1)
    const { profile, refetchProfile } = useProfile()
    const navigate = useNavigate()

    const shareData = {
        title: "–¢–µ–±–µ –æ—Ç–∫—Ä—ã—Ç–∫–∞ –∏–∑ ¬´–°—Ç–∞–ª—å–Ω–æ–π –ò–Ω—Ç—É–∏—Ü–∏–∏¬ª!",
        text: "–≠—Ç–æ –∏–≥—Ä–∞-–∫–≤–∏–∑ ¬´–°–µ–≤–µ—Ä—Å—Ç–∞–ª–∏¬ª, –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å —Ñ–∞–∫—Ç—ã –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è! –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –∂–µ–ª–∞—é—â–∏–º, –∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ¬´–°–µ–≤–µ—Ä—Å—Ç–∞–ª–∏¬ª –µ—â–µ –ø–æ–ª—É—á–∞—Ç —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å —Ç—É—Ä –Ω–∞ –¥–≤–æ–∏—Ö –Ω–∞ –ê–ª—Ç–∞–π –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–∑—ã. üéâ",
        url: `${process.env.REACT_APP_FRONTEND_URL}/postcards/${currentSlideIndex}.html`,
    }

    const { mutate: addScore, isLoading: isAddingScore, isSuccess: isAddedScore } = useMutation({
        mutationFn: async () => {
            try {
                const response = await apiProvider.post("/private/game/additional-games", {
                    type: "postcards"
                })
                console.log("–ü–û–ë–ï–î–ê")
                await refetchProfile()

                if (navigator.share) {
                    navigator.share(shareData)
                        .then(() => {
                            navigate("/success?type=postcards")
                        })
                        .catch((error) => console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error))
                } else {
                    alert('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web Share API.')
                }
            } catch (error) {
                console.error(error)
            }
        }
    })

    const { data: postCards, isLoading } = useQuery<string[]>({
        queryKey: ["post-cards"],
        queryFn: async () => {
            // TODO: replace with actual data
            const postCards = [
                "/postcards/1.png",
                "/postcards/2.png",
                "/postcards/3.png",
                "/postcards/4.png",
                "/postcards/5.png",
                "/postcards/6.png",
                "/postcards/7.png",
                "/postcards/8.png",
                "/postcards/9.png",
                "/postcards/10.png",
                "/postcards/11.png",
                "/postcards/12.png",
                "/postcards/13.png",
                "/postcards/14.png",
                "/postcards/15.png",
                "/postcards/16.png",
                "/postcards/17.png",
                "/postcards/18.png",
                "/postcards/19.png",
                "/postcards/20.png",
            ]

            return postCards
        }
    })

    if (profile?.game.isAdditionalGamePassed || profile?.game.isGamePassed) {
        return <Navigate to={"/"} replace={true} />
    }

    return (
        <div className="postcards">
            <div className="postcards__top">
                <h2 className="postcards__top__heading">–û—Ç–∫—Ä—ã—Ç–∫–∞ –ª—é–±–∏–º–æ–º—É –∫–æ–ª–ª–µ–≥–µ</h2>
                <h3 className="postcards__top__description">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç–∫—É ‚Äî –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ—ë,<br /> –∫–æ–º—É —Å–∫–∞–∂–µ—Ç–µ!
                </h3>
                {/*TODO –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫–æ–º–ø–µ*/}
                <Button variant="primary" className="postcards__top__button" onClick={() => addScore()}>
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </Button>
            </div>
            {isLoading ? (
                <Loader />
            ) : postCards ? (
                <Swiper
                    modules={[Navigation]}
                    slidesPerView={3}
                    onRealIndexChange={(swiper: SwiperType) => {
                        console.log('index: ', swiper.realIndex + 1)
                        setCurrentSlideIndex(swiper.realIndex + 1)
                    }}
                    navigation={{
                        enabled: true,
                    }}
                    centeredSlides={true}
                    loop={true}
                    spaceBetween={0}
                    breakpoints={{
                        320: {
                            slidesPerView: 2,
                            spaceBetween: 220,
                        },
                        768: {
                            slidesPerView: 3,
                        },
                    }}
                >
                    {postCards.map((url, index) => (
                        <SwiperSlide key={index} className="postcard__slide">
                            {({ isActive }) => (
                                <>
                                    <div
                                        className={!isActive ? 'postcard__slide_hidden' : 'postcard__slide__index'}>{`${currentSlideIndex}/${postCards.length}`}</div>
                                    <div className={isActive ? 'active' : ''}>
                                        <img src={url} alt="severstal" className="postcard__slide__image" />
                                    </div>
                                </>

                            )}
                        </SwiperSlide>
                    ))}
                </Swiper>
            ) : (
                <ErrorMessage />
            )}

        </div>
    )
}

export default Postcards